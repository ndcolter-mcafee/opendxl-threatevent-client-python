Basic Threat Event Callback Example
========================================

This sample demonstrates registering a :class:`dxlthreateventclient.callbacks.CommonThreatEventCallback` with the
DXL fabric to receive `threat events` sent by McAfee ePolicy Orchestrator (ePO).


Prerequisites
*************
* The samples configuration step has been completed (see :doc:`sampleconfig`)
* A McAfee ePolicy Orchestrator server is available on the DXL fabric, with DXL extensions 4.0.0 or higher installed.


Running
*******

To run this sample, execute the ``sample/basic/basic_threat_event_callback_example.py`` script as follows:

    .. parsed-literal::

        c:\\dxl-threatevent-client-python-sdk-\ |version|\>python sample/basic/basic_threat_event_callback_example.py

The output should appear similar to the following:

    .. code-block:: doscon

        Waiting for threat events...


At this point the sample is listening for DXL threat events generated by ePO and published to the DXL fabric.


Enable "Send DXL Threat Event" Automatic Response
***********************

The next step is to enable ePO to send DXL threat events to be sent by ePO. The steps to accomplish this are
listed below:

    * Open ePO and navigate to the `"Automatic Responses"` page.
        * The `"Send DXL Threat Event"` response should be present. If it is not, check that
          your environment meets the prerequisites (:doc:`installation`)
    * Select the check box for `"Send DXL Threat Event"`.
        * More information can be found here: :doc:`enableepothreateventresponse`    
    

Reputation Change Output
************************

After the threat event has been consumed by ePO and published over DXL, the threat event information 
should appear within the console that the sample is running (similar to the output below):

    .. code-block:: json

        Threat event on topic: /mcafee/event/epo/threat/response
        {
            "event": {
                "analyzer": {
                    "contentVersion": "",
                    "detectedUTC": "2016-12-13T22:18:34.000Z",
                    "detectionMethod": "Exploit Prevention",
                    "engineVersion": "",
                    "hostName": "SAMPLE-HOSTNAME",
                    "id": "ENDP_AM_1020",
                    "ipv4": "10.0.0.10",
                    "ipv6": "0:0:0:0:0:FFFF:0A00:0010",
                    "mac": "001122334455",
                    "name": "McAfee Endpoint Security",
                    "version": "10.5.0"
                },
                "category": "Host intrusion buffer overflow",
                "entity": {
                    "groupName": null,
                    "id": "11111111-2222-3333-4444-555555555555",
                    "osPlatform": "Workstation",
                    "osType": "Windows 7",
                    "ruleName": null,
                    "sessionId": null,
                    "type": "device"
                },
                "eventDesc": "Buffer Overflow detected and blocked (GBOP)",
                "files": [],
                "id": 18052,
                "otherData": {
                    "count": "1",
                    "definedAt": "My Organization",
                    "responseEventType": "Threat",
                    "responseRuleName": "Send Threat Event via DXL",
                    "threatSeverityString": "Critical"
                },
                "source": {
                    "hostName": "",
                    "ipv4": "10.0.0.10",
                    "ipv6": "0:0:0:0:0:FFFF:0A00:0010",
                    "mac": "",
                    "port": null,
                    "processName": "",
                    "url": "",
                    "userName": ""
                },
                "target": {
                    "fileName": "C:\\DAC\\IEXPLORE.EXE",
                    "hostName": "SAMPLE-HOSTNAME",
                    "ipv4": "10.0.0.10",
                    "ipv6": "0:0:0:0:0:FFFF:0A00:0010",
                    "mac": "",
                    "port": 0,
                    "processName": "IEXPLORE.EXE",
                    "protocol": "",
                    "userName": "SAMPLE-HOSTNAME\\Administrator"
                },
                "threatActionTaken": "blocked",
                "threatHandled": 1,
                "threatName": "ExP:Heap",
                "threatSeverity": 2,
                "threatType": "Exploit Prevention",
                "uri": null
            },
            "eventMessageType": "McAfee Common Event",
            "eventMessageVersion": "1.0"
        }


The first line displays the DXL topic that the event was received on. In this particular case it is,
"``/mcafee/event/epo/threat/response``", which indicates that this is a `threat event` from ePO.

The *threat event* information is separated into several distinct sections:

    **General Threat Event Information**

    General information about the threat event, such as the threat event message version, and threat 
    event type. 
                        
    **Event Properties**

    A ``dict`` (dictionary) of properties, including sub-members which each contain data about the 
    ``analyzer``, ``entity``, ``files``, ``source``, ``target``, and ``other data`` properties, 
    respectively. 

    
    **Analyzer Properties**

    A ``dict`` (dictionary) of properties pertaining to the analyzer used for the threat event. 

    
    **Entity Properties**

    A ``dict`` (dictionary) of properties pertaining to the entity identified for the threat event. 
                        

    **Files Properties**

    A ``dict`` (dictionary) of file members pertaining to the files relevant for the threat event. Each
    file member has a list of ``file properties``.
                        
    File members may contain one or more ``hash properties`` for the file. 
     
     
    **Source Properties**

    A ``dict`` (dictionary) of properties pertaining to the source identified for the threat event. 
      
      
    **Target Properties**

    A ``dict`` (dictionary) of properties pertaining to the source identified for the threat event.
      
      
    **Other Data Properties**

    A ``dict`` (dictionary) of properties pertaining to the source identified for the threat event. The
    data in these properties can be provided by the threat event sender as one or more of the following:
    
    * A single value 
        * e.g. ``"apiName":"send"``
    * A ``dict`` of multiple values of a single property type 
        * e.g. ``"listOfSourceIPV4":"10.0.0.1, 10.0.0.2, 10.0.0.3, 10.0.0.3"``
    * A ``set`` of multiple distinct values of a single property type
        * e.g. ``"setOfSourceIPV4":"10.0.0.1, 10.0.0.2, 10.0.0.3"``
    * A count of the distinct values of a single property type 
        * e.g. ``"distinctCountOfSourceHostName":"3"``


Details
*******

The majority of the sample code is shown below:

    .. code-block:: python

        class MyThreatEventCallback(CommonThreatEventCallback):
            
            def on_threat_event(self, threat_event_dict, original_event):
                # Display the DXL topic that the event was received on
                print "Threat event on topic: " + original_event.destination_topic

                # Dump the dictionary
                print json.dumps(threat_event_dict, sort_keys=True, indent=4, separators=(',', ': '))

        # Create the client
        with DxlClient(config) as client:

            # Connect to the fabric
            client.connect()

            # Create the Common Threat Event client
            threat_event_client = CommonThreatEventClient(client)

            # Create threat event change callback
            threat_event_callback = MyThreatEventCallback()

            # Register callbacks with client to receive threat events
            threat_event_client.add_epo_threat_event_response_callback(threat_event_callback)

            # Wait forever
            print "Waiting for threat events..."
            while True:
                time.sleep(60)

A derived class from ``CommonThreatEventCallback`` is defined which overrides the ``on_threat_event`` method 
to handle threat events. When a threat event occurs this method will display the topic that the event was 
received on and dump the threat event details.

Once a connection is established to the DXL fabric, a ``CommonThreatEventClient`` instance is created.

An instance of the derived callback is constructed and registered with the ``add_threat_event_callback`` 
method to receive threat events.




